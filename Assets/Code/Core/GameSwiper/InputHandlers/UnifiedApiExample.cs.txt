// Example: How all input handlers work with the same API

using UnityEngine;
using Code.Core.GameSwiper.InputHandlers;

// All handlers inherit from GameSwiperInputHandler and have the same API:
// - OnNextGameRequested event
// - OnPreviousGameRequested event 
// - OnDragProgress event (for visual feedback)

// Example 1: Swipe Handler
public class SwipeExample : GameSwiperInputHandler
{
    public void OnDrag(float delta)
    {
        // Reports continuous progress during drag
        float progress = delta / threshold;
        ReportDragProgress(progress); // Visual feedback: -1 to 1
        
        if (Mathf.Abs(progress) >= 1f)
        {
            if (progress > 0) RequestNextGame();
            else RequestPreviousGame();
            ReportDragProgress(0f); // Reset
        }
    }
}

// Example 2: Button Handler  
public class ButtonExample : GameSwiperInputHandler
{
    public void OnButtonClick(bool isNext)
    {
        // Instant transition - quick progress report
        if (isNext)
        {
            ReportDragProgress(1f);  // Full progress instantly
            RequestNextGame();
        }
        else
        {
            ReportDragProgress(-1f); // Full progress instantly
            RequestPreviousGame();
        }
        ReportDragProgress(0f); // Reset immediately
    }
}

// Example 3: Keyboard Handler
public class KeyboardExample : GameSwiperInputHandler  
{
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            // Same pattern - instant progress
            ReportDragProgress(1f);
            RequestNextGame();
            ReportDragProgress(0f);
        }
    }
}

// Example 4: GamePad with Analog Stick
public class GamepadExample : GameSwiperInputHandler
{
    private float _analogProgress = 0f;
    
    void Update()
    {
        float vertical = Input.GetAxis("Vertical");
        
        // Continuous progress like swipe
        if (Mathf.Abs(vertical) > 0.1f)
        {
            _analogProgress += vertical * Time.deltaTime;
            ReportDragProgress(_analogProgress);
            
            if (Mathf.Abs(_analogProgress) >= 1f)
            {
                if (_analogProgress > 0) RequestPreviousGame();
                else RequestNextGame();
                _analogProgress = 0f;
                ReportDragProgress(0f);
            }
        }
        else
        {
            // Return to center when released
            _analogProgress = Mathf.Lerp(_analogProgress, 0f, Time.deltaTime * 5f);
            ReportDragProgress(_analogProgress);
        }
    }
}

// GameSwiper treats all handlers exactly the same:
public class GameSwiperUsage
{
    void SetupHandlers(List<GameSwiperInputHandler> handlers)
    {
        foreach (var handler in handlers)
        {
            // Subscribe to the same events for ALL handlers
            handler.OnNextGameRequested += () => Debug.Log("Next!");
            handler.OnPreviousGameRequested += () => Debug.Log("Previous!");
            handler.OnDragProgress += (progress) => UpdateVisualFeedback(progress);
        }
    }
    
    void UpdateVisualFeedback(float progress)
    {
        // Visual feedback is the same regardless of input type
        // -1 = full drag toward previous
        //  0 = neutral/centered
        //  1 = full drag toward next
        
        // Could be from:
        // - Slow swipe (continuous 0 to 1)
        // - Button press (instant 0 to 1 to 0)
        // - Analog stick (continuous -1 to 1)
        // - Keyboard (instant jumps)
        // All work the same way!
    }
}
